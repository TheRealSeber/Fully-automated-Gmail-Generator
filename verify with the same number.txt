            try:
                if smsapi.sms_current_activation_id == '':
                    smsapi.sms_number_data = smsapi.getNumberByMyself()
                    smsapi.sms_current_activation_id = smsapi.sms_number_data['activationId']
                    smsapi.sms_number = f'+{smsapi.sms_number_data["phoneNumber"]}'
                    smsapi.sms_is_new_number = True
                elif 'STATUS_OK' in smsapi.sms_activation_status:
                    smsapi.sa.setStatus(smsapi.sms_current_activation_id, status=3)
                    smsapi.sms_is_new_number = False
                elif 'STATUS_CANCEL' in smsapi.sms_activation_status:
                    smsapi.sms_number_data = smsapi.getNumberByMyself()
                    smsapi.sms_current_activation_id = smsapi.sms_number_data['activationId']
                    smsapi.sms_number = f'+{smsapi.sms_number_data["phoneNumber"]}'
                    smsapi.sms_is_new_number = True

                print(f'[{The_time()}] - Phone number: {smsapi.sms_number}')

                phone_input = WebDriverWait(self.driver, 10).until(EC.element_to_be_clickable((By.XPATH, '//*[@id="phoneNumberId"]')))
                phone_input.clear()

                time.sleep(random.uniform(0.25, 1.0))
                self._dummy_send(phone_input, smsapi.sms_number)
                time.sleep(random.uniform(0.25, 1.0))

                submit_button = self.driver.find_elements(By.XPATH, '//div[@id="view_container"]//div[@data-is-touch-wrapper="true"]//button[@type="button"]')[0]
                submit_button.click()

                try:
                    WebDriverWait(self.driver, 6).until(EC.url_contains('webgradsidvverify'))
                    if smsapi.sms_is_new_number:
                        smsapi.sa.setStatus(smsapi.sms_current_activation_id, status=1)
                    else:
                        smsapi.sa.setStatus(smsapi.sms_current_activation_id, status=3)
                    print(f'[{The_time()}] - Waiting for sms.')
                    is_successfull = False
                    timeout = time.time() + 77
                    while True:
                        time.sleep(3)
                        if time.time() > timeout:
                            break
                        else:
                            smsapi.sms_activation_status = smsapi.sa.getStatus(smsapi.sms_current_activation_id)
                            if 'STATUS_OK' in smsapi.sms_activation_status:
                                activation_code = smsapi.sms_activation_status.split(":")[1]
                                print(f'[{The_time()}] - Received code: {activation_code}')
                                code_input = self.driver.find_element(By.XPATH, '//*[@id="code"]')
                                self._dummy_send(code_input, activation_code)
                                time.sleep(random.uniform(1.25, 2.25))
                                code_input.send_keys(Keys.ENTER)
                                time.sleep(random.uniform(4.25, 5.0))
                                if EC.url_contains('webpersonaldetails')(self.driver):
                                    is_successfull = True
                                break
                            elif 'STATUS_CANCEL' in smsapi.sms_activation_status:
                                break
                    if is_successfull:
                        print(f'[{The_time()}] - Gmail verified.')
                        time.sleep(3)
                    else:
                        print(f'[{The_time()}] - Sms timeout or something went wrong, getting new phone.')
                        if not 'STATUS_CANCEL' in smsapi.sms_activation_status:
                            smsapi.sa.setStatus(smsapi.sms_current_activation_id, status=8)
                        smsapi.sms_activation_status = 'STATUS_CANCEL'
                        self.driver.back()
                        time.sleep(random.uniform(2.75, 3.5))
                        self.sms_verification(smsapi=smsapi)               
                except TimeoutException:
                    print(f'[{The_time()}] - Blocked, getting new phone.')
                    if 'STATUS_OK' in smsapi.sms_activation_status:
                        smsapi.sa.setStatus(smsapi.sms_current_activation_id, status=6)
                        smsapi.sms_activation_status = 'STATUS_CANCEL'
                    else:
                        smsapi.sa.setStatus(smsapi.sms_current_activation_id, status=8)
                        smsapi.sms_activation_status = 'STATUS_CANCEL'
                    self.sms_verification(smsapi=smsapi)
            except NoSuchElementException:
                print(f'[{The_time()}] - Gmail verified.')
            except KeyError:
                self.sms_verification(smsapi=smsapi)

    class SmsVerification:

        def __init__(self) -> None:
            self.sa = SMSActivateAPI(Tasks.settings['sms_activate_api_key'])
            self.sms_countries = [0] # 38 - ghana, 90 - nicaragua, 8 - kenya 3,8,15,25,68,90
            self.sms_current_activation_id = ''
            self.sms_activation_status = ''
            self.sms_number_data = ''
            self.sms_number = ''
            self.sms_is_new_number = False

        def getNumberByMyself(self):
            country = random.choice(self.sms_countries)
            if country == 0:
                operators = ['megafon', 'rostelecom', 'tele2', 'yota']
                return self.sa.getNumberV2(service='go', country=country, operator=random.choice(operators))
            elif country == 8:
                return self.sa.getNumberV2(service='go', country=country, operator='telkom')
            else:
                return self.sa.getNumberV2(service='go', country=country)